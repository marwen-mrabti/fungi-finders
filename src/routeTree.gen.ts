/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as IndexImport } from './routes/index'
import { Route as GuideMushroomIdImport } from './routes/guide/$mushroomId'

// Create Virtual Routes

const GuideIndexLazyImport = createFileRoute('/guide/')()

// Create/Update Routes

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const GuideIndexLazyRoute = GuideIndexLazyImport.update({
  id: '/guide/',
  path: '/guide/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/guide/index.lazy').then((d) => d.Route))

const GuideMushroomIdRoute = GuideMushroomIdImport.update({
  id: '/guide/$mushroomId',
  path: '/guide/$mushroomId',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/guide/$mushroomId': {
      id: '/guide/$mushroomId'
      path: '/guide/$mushroomId'
      fullPath: '/guide/$mushroomId'
      preLoaderRoute: typeof GuideMushroomIdImport
      parentRoute: typeof rootRoute
    }
    '/guide/': {
      id: '/guide/'
      path: '/guide'
      fullPath: '/guide'
      preLoaderRoute: typeof GuideIndexLazyImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/guide/$mushroomId': typeof GuideMushroomIdRoute
  '/guide': typeof GuideIndexLazyRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/guide/$mushroomId': typeof GuideMushroomIdRoute
  '/guide': typeof GuideIndexLazyRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/guide/$mushroomId': typeof GuideMushroomIdRoute
  '/guide/': typeof GuideIndexLazyRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/guide/$mushroomId' | '/guide'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/guide/$mushroomId' | '/guide'
  id: '__root__' | '/' | '/guide/$mushroomId' | '/guide/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  GuideMushroomIdRoute: typeof GuideMushroomIdRoute
  GuideIndexLazyRoute: typeof GuideIndexLazyRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  GuideMushroomIdRoute: GuideMushroomIdRoute,
  GuideIndexLazyRoute: GuideIndexLazyRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/guide/$mushroomId",
        "/guide/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/guide/$mushroomId": {
      "filePath": "guide/$mushroomId.tsx"
    },
    "/guide/": {
      "filePath": "guide/index.lazy.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
